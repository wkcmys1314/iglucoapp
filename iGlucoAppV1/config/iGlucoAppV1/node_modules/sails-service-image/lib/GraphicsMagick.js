'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _gm = require('gm');

var _gm2 = _interopRequireDefault(_gm);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _BaseImage2 = require('./BaseImage');

var _BaseImage3 = _interopRequireDefault(_BaseImage2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GraphicsMagick = function (_BaseImage) {
  _inherits(GraphicsMagick, _BaseImage);

  function GraphicsMagick(config) {
    _classCallCheck(this, GraphicsMagick);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GraphicsMagick).call(this, config));

    _this.setProvider(_gm2.default);
    return _this;
  }

  /**
   * Get title from IPTC
   * @param {String|Buffer|Stream} image Source image
   * @returns {Promise}
   */

  _createClass(GraphicsMagick, [{
    key: 'getTitle',
    value: function getTitle(image) {
      var _this2 = this;

      return new _bluebird2.default(function (resolve, reject) {
        _this2.getProvider()(image).identify('%[IPTC:2:05]', function (error, metadata) {
          return error ? reject(error) : resolve(metadata.trimRight());
        });
      });
    }

    /**
     * Get description from IPTC
     * @param {String|Buffer|Stream} image Source image
     * @returns {Promise}
     */

  }, {
    key: 'getDescription',
    value: function getDescription(image) {
      var _this3 = this;

      return new _bluebird2.default(function (resolve, reject) {
        _this3.getProvider()(image).identify('%[IPTC:2:120]', function (error, metadata) {
          return error ? reject(error) : resolve(metadata.trimRight());
        });
      });
    }

    /**
     * Get keywords from IPTC
     * @param {String|Buffer|Stream} image Source image
     * @returns {Promise}
     */

  }, {
    key: 'getKeywords',
    value: function getKeywords(image) {
      var _this4 = this;

      return new _bluebird2.default(function (resolve, reject) {
        _this4.getProvider()(image).identify('%[IPTC:2:25]', function (error, metadata) {
          return error ? reject(error) : resolve(metadata.trimRight().split(';').join(','));
        });
      });
    }

    /**
     * Get category from IPTC
     * @param {String|Buffer|Stream} image Source image
     * @returns {Promise}
     */

  }, {
    key: 'getCategory',
    value: function getCategory(image) {
      var _this5 = this;

      return new _bluebird2.default(function (resolve, reject) {
        _this5.getProvider()(image).identify('%[IPTC:2:15]', function (error, metadata) {
          return error ? reject(error) : resolve(metadata.trimRight());
        });
      });
    }

    /**
     * Get image format
     * @param {String|Buffer|Stream} image Source image
     * @returns {Promise}
     */

  }, {
    key: 'getFormat',
    value: function getFormat(image) {
      var _this6 = this;

      return new _bluebird2.default(function (resolve, reject) {
        _this6.getProvider()(image).identify(function (error, data) {
          return error ? reject(error) : resolve(data.format);
        });
      });
    }

    /**
     * Get IPTC information from image
     * @param {String|Buffer|Stream} image Source image
     * @returns {Promise}
     */

  }, {
    key: 'iptc',
    value: function iptc(image) {
      return _bluebird2.default.all([this.getTitle(image), this.getDescription(image), this.getKeywords(image), this.getCategory(image), this.getFormat(image)]).spread(function (title, description, keywords, category, format) {
        return _bluebird2.default.resolve({
          title: title,
          description: description,
          keywords: keywords,
          category: category,
          format: format
        });
      });
    }

    /**
     * Resize image
     * @param {String|Buffer|Stream} image Source image
     * @param {Object} [_config] Configuration object
     * @returns {Promise}
     */

  }, {
    key: 'resize',
    value: function resize(image, _config) {
      var _this7 = this;

      var config = _config || {};

      return new _bluebird2.default(function (resolve, reject) {
        _this7.getProvider()(image).resize(config.width || 200, config.height, config.direction || '>').setFormat(config.format || 'jpg').toBuffer(function (error, buffer) {
          return error ? reject(error) : resolve(buffer);
        });
      });
    }

    /**
     * Crop image
     * @param {String|Buffer|Stream} image Source image
     * @param {Object} [_config] Configuration object
     * @returns {Promise}
     */

  }, {
    key: 'crop',
    value: function crop(image, _config) {
      var _this8 = this;

      var config = _config || {};

      return new _bluebird2.default(function (resolve, reject) {
        _this8.getProvider()(image).crop(config.width || '100%', config.height || '100%', config.x || 0, config.y || 0).setFormat(config.format || 'jpg').toBuffer(function (error, buffer) {
          return error ? reject(error) : resolve(buffer);
        });
      });
    }

    /**
     * Create thumbnail for image
     * @param {String|Buffer|Stream} image Source image
     * @param {Object} [_config]
     * @returns {Promise}
     */

  }, {
    key: 'thumbnail',
    value: function thumbnail(image, _config) {
      return this.resize(image, _config);
    }
  }]);

  return GraphicsMagick;
}(_BaseImage3.default);

exports.default = GraphicsMagick;
module.exports = exports['default'];